import Vue from "vue";
import Vuex from "vuex";
Vue.use(Vuex);

export default new Vuex.Store({
  state: () => ({
    commandes: [
      {
        _id: Math.floor(Math.random() * 10000).toString(),
        clientId: Math.floor(Math.random() * 10000).toString(),
        livreurId: null,
        restaurateurId: Math.floor(Math.random() * 10000).toString(),
        status: "acceptationCommande",
        productsOrder: [{ id: 25, quantity: 2 }],
        menusOrder: [{ id: 25, quantity: 2 }],
      },
      {
        _id: Math.floor(Math.random() * 10000).toString(),
        clientId: Math.floor(Math.random() * 10000).toString(),
        livreurId: null,
        restaurateurId: Math.floor(Math.random() * 10000).toString(),
        status: "acceptationLivraison",
        productsOrder: [{ id: 25, quantity: 2 }],
        menusOrder: [{ id: 25, quantity: 2 }],
      },
      {
        _id: Math.floor(Math.random() * 10000).toString(),
        clientId: Math.floor(Math.random() * 10000).toString(),
        livreurId: null,
        restaurateurId: Math.floor(Math.random() * 10000).toString(),
        status: "acceptationCommande",
        productsOrder: [{ id: 25, quantity: 2 }],
        menusOrder: [{ id: 25, quantity: 2 }],
      },
      {
        _id: Math.floor(Math.random() * 10000).toString(),
        clientId: Math.floor(Math.random() * 10000).toString(),
        livreurId: null,
        restaurateurId: Math.floor(Math.random() * 10000).toString(),
        status: "acceptationCommande",
        productsOrder: [{ id: 25, quantity: 2 }],
        menusOrder: [{ id: 25, quantity: 2 }],
      },
      {
        _id: Math.floor(Math.random() * 10000).toString(),
        clientId: Math.floor(Math.random() * 10000).toString(),
        livreurId: null,
        restaurateurId: Math.floor(Math.random() * 10000).toString(),
        status: "acquittementLivraison",
        productsOrder: [{ id: 25, quantity: 2 }],
        menusOrder: [{ id: 25, quantity: 2 }],
      },
      {
        _id: Math.floor(Math.random() * 10000).toString(),
        clientId: Math.floor(Math.random() * 10000).toString(),
        livreurId: null,
        restaurateurId: Math.floor(Math.random() * 10000).toString(),
        status: "acceptationCommande",
        productsOrder: [{ id: 25, quantity: 2 }],
        menusOrder: [{ id: 25, quantity: 2 }],
      },
      {
        _id: Math.floor(Math.random() * 10000).toString(),
        clientId: Math.floor(Math.random() * 10000).toString(),
        livreurId: null,
        restaurateurId: Math.floor(Math.random() * 10000).toString(),
        status: "acceptationLivraison",
        productsOrder: [{ id: 25, quantity: 2 }],
        menusOrder: [{ id: 25, quantity: 2 }],
      },
      {
        _id: Math.floor(Math.random() * 10000).toString(),
        clientId: Math.floor(Math.random() * 10000).toString(),
        livreurId: null,
        restaurateurId: Math.floor(Math.random() * 10000).toString(),
        status: "acceptationCommande",
        productsOrder: [{ id: 25, quantity: 2 }],
        menusOrder: [{ id: 25, quantity: 2 }],
      },
      {
        _id: Math.floor(Math.random() * 10000).toString(),
        clientId: Math.floor(Math.random() * 10000).toString(),
        livreurId: null,
        restaurateurId: Math.floor(Math.random() * 10000).toString(),
        status: "acceptationCommande",
        productsOrder: [{ id: 25, quantity: 2 }],
        menusOrder: [{ id: 25, quantity: 2 }],
      },
      {
        _id: Math.floor(Math.random() * 10000).toString(),
        clientId: Math.floor(Math.random() * 10000).toString(),
        livreurId: null,
        restaurateurId: Math.floor(Math.random() * 10000).toString(),
        status: "acquittementLivraison",
        productsOrder: [{ id: 25, quantity: 2 }],
        menusOrder: [{ id: 25, quantity: 2 }],
      },
      {
        _id: Math.floor(Math.random() * 10000).toString(),
        clientId: Math.floor(Math.random() * 10000).toString(),
        livreurId: null,
        restaurateurId: Math.floor(Math.random() * 10000).toString(),
        status: "acceptationCommande",
        productsOrder: [{ id: 25, quantity: 2 }],
        menusOrder: [{ id: 25, quantity: 2 }],
      },
      {
        _id: Math.floor(Math.random() * 10000).toString(),
        clientId: Math.floor(Math.random() * 10000).toString(),
        livreurId: null,
        restaurateurId: Math.floor(Math.random() * 10000).toString(),
        status: "acceptationLivraison",
        productsOrder: [{ id: 25, quantity: 2 }],
        menusOrder: [{ id: 25, quantity: 2 }],
      },
      {
        _id: Math.floor(Math.random() * 10000).toString(),
        clientId: Math.floor(Math.random() * 10000).toString(),
        livreurId: null,
        restaurateurId: Math.floor(Math.random() * 10000).toString(),
        status: "acceptationCommande",
        productsOrder: [{ id: 25, quantity: 2 }],
        menusOrder: [{ id: 25, quantity: 2 }],
      },
      {
        _id: Math.floor(Math.random() * 10000).toString(),
        clientId: Math.floor(Math.random() * 10000).toString(),
        livreurId: null,
        restaurateurId: Math.floor(Math.random() * 10000).toString(),
        status: "acceptationCommande",
        productsOrder: [{ id: 25, quantity: 2 }],
        menusOrder: [{ id: 25, quantity: 2 }],
      },
      {
        _id: Math.floor(Math.random() * 10000).toString(),
        clientId: Math.floor(Math.random() * 10000).toString(),
        livreurId: null,
        restaurateurId: Math.floor(Math.random() * 10000).toString(),
        status: "acquittementLivraison",
        productsOrder: [{ id: 25, quantity: 2 }],
        menusOrder: [{ id: 25, quantity: 2 }],
      },
    ],
  }),
  mutations: {},
  actions: {},
  getters: {
    getCommandes(stats) {
      return stats.commandes;
    },
    hasCommandes(stats) {
      return stats.commandes && stats.commandes.length > 0;
    },
  },
});
